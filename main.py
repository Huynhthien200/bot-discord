import os
import json
import logging
import asyncio
import discord
from discord.ext import commands, tasks
from aiohttp import web
from pysui import SuiConfig, SyncClient

# === Logging config ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler("sui_bot.log"),
        logging.StreamHandler()
    ]
)

# === Env vars ===
RPC_URL        = os.getenv("RPC_URL", "https://rpc-mainnet.suiscan.xyz/")
DISCORD_TOKEN  = os.getenv("DISCORD_TOKEN")
CHANNEL_ID     = int(os.getenv("DISCORD_CHANNEL_ID", "0"))
SUI_PRIVATE_KEY= os.getenv("SUI_PRIVATE_KEY")
TARGET_ADDRESS = os.getenv("SUI_TARGET_ADDRESS")

if not all([DISCORD_TOKEN, CHANNEL_ID, SUI_PRIVATE_KEY, TARGET_ADDRESS]):
    raise RuntimeError("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt!")

# === Load watched wallets ===
try:
    with open("watched.json", "r") as f:
        WATCHED = json.load(f)
    logging.info(f"ƒê√£ t·∫£i {len(WATCHED)} v√≠ t·ª´ watched.json")
except Exception as e:
    logging.error(f"L·ªói ƒë·ªçc watched.json: {e}")
    WATCHED = []

# === SUI connect ===
try:
    cfg = SuiConfig.user_config(prv_keys=[SUI_PRIVATE_KEY], rpc_url=RPC_URL)
    client = SyncClient(cfg)
    withdraw_signer = str(cfg.active_address)
    logging.info(f"K·∫øt n·ªëi SUI th√†nh c√¥ng! ƒê·ªãa ch·ªâ v√≠: {withdraw_signer[:10]}...")
except Exception as e:
    logging.critical(f"L·ªói k·∫øt n·ªëi SUI: {e}")
    raise

# === Discord bot ===
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

last_balances = {}

def safe_address(addr: str) -> str:
    return f"{addr[:6]}...{addr[-4:]}" if addr else "unknown"

def get_sui_balance(addr: str) -> float:
    """L·∫•y s·ªë d∆∞ SUI (SUI) b·∫±ng get_gas"""
    try:
        res = client.get_gas(address=addr)
        coins = res.data if hasattr(res, "data") else res
        return sum(int(c.balance) / 1_000_000_000 for c in coins)
    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra s·ªë d∆∞ {safe_address(addr)}: {e}")
        return -1

def withdraw_all_sui(from_addr: str) -> str | None:
    """R√∫t h·∫øt SUI v·ªÅ v√≠ target (ch·ªâ r√∫t v√≠ c√≥ private key - withdraw_signer)"""
    if from_addr != withdraw_signer:
        logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ r√∫t t·ª´ v√≠ {safe_address(from_addr)}")
        return None
    try:
        # L·∫•y gas object SUI
        res = client.get_gas(address=from_addr)
        coins = res.data if hasattr(res, "data") else res
        if not coins:
            logging.error("Kh√¥ng c√≥ SUI (gas object) ƒë·ªÉ r√∫t!")
            return None
        primary_coin = coins[0]
        total = sum(int(c.balance) for c in coins)
        # Tr·ª´ 1_000_000 MIST l√†m fee d·ª± ph√≤ng (t√πy network b·∫°n ch·ªânh l·∫°i)
        send_amount = total - 1_000_000 if total > 1_000_000 else total
        if send_amount <= 0:
            logging.warning("Kh√¥ng ƒë·ªß SUI ƒë·ªÉ r√∫t sau khi tr·ª´ fee")
            return None
        tx_result = client.transfer_sui(
            signer=from_addr,
            recipient=TARGET_ADDRESS,
            amount=send_amount,
            gas_object=primary_coin.object_id
        )
        return tx_result.tx_digest if hasattr(tx_result, 'tx_digest') else None
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi r√∫t ti·ªÅn: {e}")
        return None

@tasks.loop(seconds=5)
async def monitor_wallets():
    for wallet in WATCHED:
        addr = wallet["address"]
        try:
            balance = get_sui_balance(addr)
            prev = last_balances.get(addr, -1)
            # Th√¥ng b√°o thay ƒë·ªïi s·ªë d∆∞
            if balance != prev and prev != -1:
                ch = bot.get_channel(CHANNEL_ID)
                msg = (
                    f"**{wallet.get('name', 'Unnamed')}** ({safe_address(addr)})\n"
                    f"üîÑ S·ªë d∆∞: `{balance:.6f} SUI` (tr∆∞·ªõc: `{prev:.6f}`)"
                )
                await ch.send(msg)
            last_balances[addr] = balance

            # R√∫t n·∫øu l√† v√≠ ƒë∆∞·ª£c b·∫≠t r√∫t & l√† v√≠ private key
            if wallet.get("withdraw", False) and balance > 0:
                tx_hash = withdraw_all_sui(addr)
                if tx_hash:
                    ch = bot.get_channel(CHANNEL_ID)
                    await ch.send(
                        f"üí∏ **ƒê√£ r√∫t t·ª± ƒë·ªông**\n"
                        f"V√≠: {wallet.get('name', safe_address(addr))}\n"
                        f"S·ªë ti·ªÅn: `{balance:.6f} SUI`\n"
                        f"TX: `{tx_hash}`"
                    )
        except Exception as e:
            logging.error(f"L·ªói khi x·ª≠ l√Ω v√≠ {safe_address(addr)}: {e}")

# --- L·ªánh Discord check s·ªë d∆∞
@bot.command()
async def balance(ctx, address: str = None):
    """Xem s·ªë d∆∞ SUI m·ªôt v√≠ b·∫•t k·ª≥"""
    if not address:
        await ctx.send("Nh·∫≠p ƒë·ªãa ch·ªâ v√≠!")
        return
    bal = get_sui_balance(address)
    await ctx.send(f"S·ªë d∆∞ `{safe_address(address)}`: `{bal:.6f} SUI`")

# === Web server Railway keepalive ===
async def health_check(request):
    return web.Response(text=f"üü¢ Bot ƒëang ch·∫°y | Theo d√µi {len(WATCHED)} v√≠")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", "8080")))
    await site.start()

@bot.event
async def on_ready():
    logging.info(f"Bot Discord ƒë√£ s·∫µn s√†ng: {bot.user.name}")
    try:
        await bot.get_channel(CHANNEL_ID).send(
            f"üöÄ **Bot SUI Monitor ƒë√£ kh·ªüi ƒë·ªông**\n"
            f"‚Ä¢ Theo d√µi {len(WATCHED)} v√≠ (5s/ki·ªÉm tra)\n"
            f"‚Ä¢ RPC: `{RPC_URL}`\n"
            f"‚Ä¢ V√≠ r√∫t ch·ªß: `{safe_address(withdraw_signer)}`"
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i tin nh·∫Øn kh·ªüi ƒë·ªông: {e}")
    monitor_wallets.start()
    await start_web_server()

if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)
