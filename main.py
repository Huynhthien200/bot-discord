import os
import json
import logging
import asyncio
import discord
from discord.ext import commands, tasks
from aiohttp import web
from pysui import SuiConfig, SyncClient

# === Logging setup ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.FileHandler("sui_bot.log"),
        logging.StreamHandler()
    ]
)

# === Environment ===
RPC_URL = os.getenv("RPC_URL", "https://rpc-mainnet.suiscan.xyz/")
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID", "0"))
SUI_PRIVATE_KEY = os.getenv("SUI_PRIVATE_KEY")
TARGET_ADDRESS = os.getenv("SUI_TARGET_ADDRESS")

if not all([DISCORD_TOKEN, CHANNEL_ID, SUI_PRIVATE_KEY, TARGET_ADDRESS]):
    raise RuntimeError("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt!")

# === Load watched addresses ===
try:
    with open("watched.json", "r") as f:
        WATCHED = json.load(f)
    logging.info(f"ƒê√£ t·∫£i {len(WATCHED)} v√≠ t·ª´ watched.json")
except Exception as e:
    logging.error(f"L·ªói ƒë·ªçc watched.json: {e}")
    WATCHED = []

# === K·∫øt n·ªëi SUI ===
try:
    cfg = SuiConfig.user_config(
        prv_keys=[SUI_PRIVATE_KEY],
        rpc_url=RPC_URL
    )
    client = SyncClient(cfg)
    withdraw_signer = str(cfg.active_address)
    logging.info(f"K·∫øt n·ªëi SUI th√†nh c√¥ng! ƒê·ªãa ch·ªâ v√≠: {withdraw_signer[:10]}...")
except Exception as e:
    logging.critical(f"L·ªói k·∫øt n·ªëi SUI: {e}")
    raise

# === Discord Bot ===
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

last_balances = {}

def safe_address(addr: str) -> str:
    """·∫®n m·ªôt ph·∫ßn ƒë·ªãa ch·ªâ v√≠ ƒë·ªÉ b·∫£o m·∫≠t"""
    return f"{addr[:6]}...{addr[-4:]}" if addr else "unknown"

def get_sui_balance(addr: str) -> float:
    """L·∫•y s·ªë d∆∞ SUI (ƒë∆°n v·ªã SUI) cho pysui >=0.85.0"""
    try:
        res = client.get_all_coins(address=addr)
        # pysui >=0.85.0 tr·∫£ v·ªÅ object c√≥ .data l√† list coin object
        total = 0
        for coin in res.data:
            if coin.coin_type == "0x2::sui::SUI":
                total += int(coin.balance)
        return total / 1_000_000_000
    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra s·ªë d∆∞ {safe_address(addr)}: {e}")
        return -1

async def withdraw_sui(from_addr: str) -> str | None:
    """R√∫t to√†n b·ªô SUI v·ªÅ v√≠ m·ª•c ti√™u"""
    if from_addr != withdraw_signer:
        logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ r√∫t t·ª´ v√≠ {safe_address(from_addr)}")
        return None

    try:
        # L·∫•y s·ªë d∆∞ th·ª±c t·∫ø
        balance = get_sui_balance(from_addr)
        if balance <= 0:
            return None

        # L·∫•y gas object
        gas_objs = client.get_all_coins(address=from_addr)
        if not gas_objs.data:
            logging.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Gas Object cho {safe_address(from_addr)}")
            return None

        gas_object_id = gas_objs.data[0].coin_object_id
        mist_amount = int(balance * 1_000_000_000) - 10000  # tr·ª´ ph√≠ ch√∫t

        # G·ªçi transfer
        tx_result = client.transfer_sui(
            signer=from_addr,
            recipient=TARGET_ADDRESS,
            amount=mist_amount,
            gas_object=gas_object_id
        )

        if hasattr(tx_result, 'tx_digest'):
            return tx_result.tx_digest
        else:
            logging.error(f"‚ùå L·ªói tr·∫£ v·ªÅ tx_result: {tx_result}")
            return None

    except Exception as e:
        logging.error(f"‚ùå L·ªói khi r√∫t t·ª´ {safe_address(from_addr)}: {e}")
        return None

@tasks.loop(seconds=5)
async def monitor_wallets():
    for wallet in WATCHED:
        addr = wallet["address"]
        try:
            balance = get_sui_balance(addr)
            prev_balance = last_balances.get(addr, -1)

            # Th√¥ng b√°o thay ƒë·ªïi s·ªë d∆∞
            if balance != prev_balance and prev_balance != -1:
                emoji = "üîº" if balance > prev_balance else "üîΩ"
                change = balance - prev_balance
                msg = (
                    f"**{wallet.get('name', 'Unnamed')}** ({safe_address(addr)})\n"
                    f"{emoji} S·ªë d∆∞: `{balance:.6f} SUI` ({'+' if change > 0 else ''}{change:.6f})"
                )
                await bot.get_channel(CHANNEL_ID).send(msg)

            last_balances[addr] = balance

            # R√∫t SUI n·∫øu ƒë∆∞·ª£c ph√©p v√† s·ªë d∆∞ > 0
            if wallet.get("withdraw", False) and balance > 0:
                tx_hash = await withdraw_sui(addr)
                if tx_hash:
                    await bot.get_channel(CHANNEL_ID).send(
                        f"üí∏ **ƒê√£ r√∫t t·ª± ƒë·ªông**\n"
                        f"V√≠: {wallet.get('name', safe_address(addr))}\n"
                        f"S·ªë ti·ªÅn: `{balance:.6f} SUI`\n"
                        f"TX: `{tx_hash}`"
                    )
        except Exception as e:
            logging.error(f"L·ªói khi x·ª≠ l√Ω v√≠ {safe_address(addr)}: {e}")

# === Web Server for Railway/Render keepalive ===
async def health_check(request):
    return web.Response(text=f"üü¢ Bot ƒëang ch·∫°y | Theo d√µi {len(WATCHED)} v√≠")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", "8080")))
    await site.start()

@bot.event
async def on_ready():
    logging.info(f"Bot Discord ƒë√£ s·∫µn s√†ng: {bot.user.name}")
    try:
        await bot.get_channel(CHANNEL_ID).send(
            f"üöÄ **Bot SUI Monitor ƒë√£ kh·ªüi ƒë·ªông**\n"
            f"‚Ä¢ Theo d√µi {len(WATCHED)} v√≠ (5s/ki·ªÉm tra)\n"
            f"‚Ä¢ RPC: `{RPC_URL}`\n"
            f"‚Ä¢ V√≠ ch·ªß: `{safe_address(withdraw_signer)}`"
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i tin nh·∫Øn kh·ªüi ƒë·ªông: {e}")
    monitor_wallets.start()
    await start_web_server()

if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)
